keymap_lock                    # reader-write lock (rwlock_t)
SpinLock  
_raw_spin_lock  
futex_wake  
pthread_mutex_                 # PThread Mutex
Mutex::_onUnlock               # Mongo custom mutex
Mutex::unlock                 # Mongo custom mutex
std::_Sp_counted_base  
LockManager::unlock            # Mongo custom locks
pthread_cond_timedwait  
native_queued_spin_lock_slowpath   # Queued Spin Lock
mongo::Top::record                       # Potentially a C Libraries Function
mongo::UniqueOperationIdRegistry::_releaseSlot # stdx::lock_guard
sem_timedwait@plt                        # Semaphore timed wait
sem_post@plt                             # Semaphore Post
mongo::FlowControlTicketholder::getTicket # Synchronization helper function for Mongo
mongo::LockerImpl::unlock                # 
mongo::LockerImpl::lock                  # 
mongo::SimpleMutex::lock                 # 
mongo::LockManager::lock                 # 
mongo::Lock::DBLock::DBLock              # 
std::condition_variable::condition_variable # std synchronization primitive
mongo::LockerImpl::wasGlobalLockTakenForWrite # 
mongo::isModeCovered(mongo::LockMode, mongo::LockMode)
mongo::future_details::FutureImpl<mongo::Message>::makeReady(mongo::StatusWith<mongo::Message>) # is related to MongoDBâ€™s asynchronous programming model. It sets the state of a Future object to ready with the provided StatusWith<Message>.
mongo::TicketHolder::release             # 
mongo::Lock::ResourceLock::unlock() [clone .part.47] 
namespace)::DiagnosticListener::onContendedLock mongo::(anonymous namespace)::DiagnosticListener::onContendedLock # 
runtime.lock2                            # Golang's code to lock mutex with a rank, ranks of locks depict what child locks block the current lock
sync.(*poolChain).popTail                # Golang's queue popping operation
pollset_work                             # gRPC's completition queue. Threads wait on specific events that happen in a pollset (completion queue)
grpc::CoreCodegen::grpc_completion_queue_pluck # gRPC blocks until an event with a particular tag is available
gpr_mu_lock                              # gRPC waits until a particular mutex is released
futex_wait                               # 
gpr_mu_unlock                            # gRPC's mutex
runtime.unlock2                          # Golang's futex
runtime.park_m                           # Golang's code to park (stop) a goroutine
mutex_lock                               # 
ep_poll_callback                         # callback that is passed to the wait queue wakeup
gpr_cv_signal                            # gRPC's code to wake any thread waiting on gRPC's pthread_cond_t
mutex_unlock                             # 
__pthread_cond_wait
Mutex
mongo::LatchAnalyzer::onAcquire
std::condition_variable
__lll_unlock_wake
__pthread_cleanup_pop
__condvar_cancel_waiting
mongo::LatchAnalyzer::onRelease
mongo::LockerImpl
mongo::CondVarLockGrantNotification
pthread
__thread_run
atomic
__lll_lock_wait
ngx_http_lua_finalize_threads
ngx_shmtx_wakeup
ngx_shmtx_lock
lua_newthread
ngx_pool_cleanup_add
ngx_http_lua_new_thread
ngx_create_pool
ngx_http_block_reading
ngx_http_set_content_type
ngx_http_lua_ngx_req_read_body
ngx_http_lua_req_body_post_read
event_set
event_callback_activate_nolock_
event_del_nolock_
event_reinit
evutil_gettime_monotonic_
event_changelist_remove_all_
event_base_loop
event_add
event_add_nolock_
event_base_set
event_assign
__sync_page_skip